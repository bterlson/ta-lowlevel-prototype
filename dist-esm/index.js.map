{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  PipelineOptions,\r\n  createPipelineRequest,\r\n  createHttpHeaders,\r\n  HttpMethods,\r\n  Pipeline,\r\n} from \"@azure/core-https\";\r\nimport { TokenCredential } from \"@azure/core-auth\";\r\nimport {\r\n  AnalyzeParameters,\r\n  AnalyzeStatusParameters,\r\n  HealthStatusParameters,\r\n  HealthParameters,\r\n  EntitiesRecognitionGeneralParameters,\r\n  EntitiesRecognitionPiiParameters,\r\n  EntitiesLinkingParameters,\r\n  KeyPhrasesParameters,\r\n  LanguagesParameters,\r\n  SentimentParameters,\r\n  CancelHealthJobParameters,\r\n  RequestParameters,\r\n} from \"./parameters\";\r\nimport {\r\n  Analyze202Response,\r\n  Analyze400Response,\r\n  Analyze500Response,\r\n  AnalyzeStatus200Response,\r\n  AnalyzeStatus404Response,\r\n  AnalyzeStatus500Response,\r\n  HealthStatus200Response,\r\n  HealthStatus404Response,\r\n  HealthStatus500Response,\r\n  CancelHealthJob202Response,\r\n  CancelHealthJob404Response,\r\n  CancelHealthJob500Response,\r\n  Health202Response,\r\n  Health400Response,\r\n  Health500Response,\r\n  EntitiesRecognitionGeneral200Response,\r\n  EntitiesRecognitionGeneral400Response,\r\n  EntitiesRecognitionGeneral500Response,\r\n  EntitiesRecognitionPii200Response,\r\n  EntitiesRecognitionPii400Response,\r\n  EntitiesRecognitionPii500Response,\r\n  EntitiesLinking200Response,\r\n  EntitiesLinking400Response,\r\n  EntitiesLinking500Response,\r\n  KeyPhrases200Response,\r\n  KeyPhrases400Response,\r\n  KeyPhrases500Response,\r\n  Languages200Response,\r\n  Languages400Response,\r\n  Languages500Response,\r\n  Sentiment200Response,\r\n  Sentiment400Response,\r\n  Sentiment500Response,\r\n  PipelineResponse,\r\n} from \"./responses\";\r\nimport {\r\n  createDefaultPipeline,\r\n  getCachedDefaultHttpsClient,\r\n} from \"./clientHelpers\";\r\n\r\n/**\r\n * Definition of each operation to help building their types\r\n */\r\ninterface Routes {\r\n  \"POST /analyze\": {\r\n    options: AnalyzeParameters;\r\n    response: Promise<\r\n      Analyze202Response | Analyze400Response | Analyze500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n  \"GET /analyze/jobs/{jobId}\": {\r\n    options: AnalyzeStatusParameters;\r\n    response: Promise<\r\n      | AnalyzeStatus200Response\r\n      | AnalyzeStatus404Response\r\n      | AnalyzeStatus500Response\r\n    >;\r\n    pathParameters: [jobId: string];\r\n  };\r\n  \"GET /entities/health/jobs/{jobId}\": {\r\n    options: HealthStatusParameters;\r\n    response: Promise<\r\n      | HealthStatus200Response\r\n      | HealthStatus404Response\r\n      | HealthStatus500Response\r\n    >;\r\n    pathParameters: [jobId: string];\r\n  };\r\n  \"DELETE /entities/health/jobs/{jobId}\": {\r\n    options: CancelHealthJobParameters;\r\n    response: Promise<\r\n      | CancelHealthJob202Response\r\n      | CancelHealthJob404Response\r\n      | CancelHealthJob500Response\r\n    >;\r\n    pathParameters: [jobId: string];\r\n  };\r\n  \"POST /entities/health/jobs\": {\r\n    options: HealthParameters;\r\n    response: Promise<\r\n      Health202Response | Health400Response | Health500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n  \"POST /entities/recognition/general\": {\r\n    options: EntitiesRecognitionGeneralParameters;\r\n    response: Promise<\r\n      | EntitiesRecognitionGeneral200Response\r\n      | EntitiesRecognitionGeneral400Response\r\n      | EntitiesRecognitionGeneral500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n  \"POST /entities/recognition/pii\": {\r\n    options: EntitiesRecognitionPiiParameters;\r\n    response: Promise<\r\n      | EntitiesRecognitionPii200Response\r\n      | EntitiesRecognitionPii400Response\r\n      | EntitiesRecognitionPii500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n  \"POST /entities/linking\": {\r\n    options: EntitiesLinkingParameters;\r\n    response: Promise<\r\n      | EntitiesLinking200Response\r\n      | EntitiesLinking400Response\r\n      | EntitiesLinking500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n  \"POST /keyPhrases\": {\r\n    options: KeyPhrasesParameters;\r\n    response: Promise<\r\n      KeyPhrases200Response | KeyPhrases400Response | KeyPhrases500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n  \"POST /languages\": {\r\n    options: LanguagesParameters;\r\n    response: Promise<\r\n      Languages200Response | Languages400Response | Languages500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n  \"POST /sentiment\": {\r\n    options: SentimentParameters;\r\n    response: Promise<\r\n      Sentiment200Response | Sentiment400Response | Sentiment500Response\r\n    >;\r\n    pathParameters: [];\r\n  };\r\n}\r\n\r\n// Calulates the parameters needed in string, parameters are enclosed by {}\r\n// This is used to\r\ntype RouteParams<\r\n  TRoute extends string\r\n> = TRoute extends `${infer _Head}{${infer _Param}}${infer Tail}`\r\n  ? [pathParam: string, ...pathParam: RouteParams<Tail>]\r\n  : TRoute extends `${infer _Head}{${infer _Param}}`\r\n  ? [string]\r\n  : [];\r\n\r\n// Checks if a given object contains any required properties\r\ntype AnyRequired<T> = {} extends T ? false : true;\r\n\r\n/**\r\n * Calculates the type of the options bag, also decides if it needs to be marked as required or optional.\r\n */\r\ntype RequestOptions<T extends keyof Routes> = AnyRequired<\r\n  Routes[T][\"options\"]\r\n> extends false\r\n  ? [options?: Routes[T][\"options\"]]\r\n  : [options: Routes[T][\"options\"]];\r\n\r\n/**\r\n * Request operation's arguments.\r\n * These arguments can be positional parameters to fill in the path template,\r\n * and also figures out if the options parameter should be marked as required or not\r\n * depending of whether or not there is a required property in the options\r\n */\r\ntype RequestArgs<T extends keyof Routes> = Routes[T][\"pathParameters\"] extends [\r\n\r\n]\r\n  ? RequestOptions<T>\r\n  : AnyRequired<Routes[T][\"options\"]> extends false\r\n  ? [\r\n      ...pathParameters: Routes[T][\"pathParameters\"],\r\n      options?: Routes[T][\"options\"]\r\n    ]\r\n  : [\r\n      ...pathParameters: Routes[T][\"pathParameters\"],\r\n      options: Routes[T][\"options\"]\r\n    ];\r\n\r\n/**\r\n * Type of the requestUnchecked function parameters. Figures out if it needs to add positional parameters for\r\n * filling out pathParameters by parsing the route string.\r\n */\r\ntype RequestUncheckedArgs<T extends string> = [\r\n  ...pathParameters: RouteParams<T>,\r\n  options?: RequestParameters\r\n];\r\n\r\n/**\r\n * Definition of the request function, it can include positional parameters\r\n * to fill out the url template.\r\n * It also adds the options bag to provide a body, queryParameters or headers\r\n */\r\ntype Request = {\r\n  <T extends keyof Routes>(\r\n    route: T,\r\n    ...args: RequestArgs<T>\r\n  ): Routes[T][\"response\"];\r\n};\r\n\r\n/**\r\n * Definition of the requestUnchecked function, it can include positional parameters\r\n * to fill out the url template, by parsing the route provided.\r\n * It als adds an optional options bag to provide a body, queryParameters or headers\r\n */\r\ntype RequestUnchecked = {\r\n  <T extends string>(\r\n    route: T,\r\n    ...args: RequestUncheckedArgs<T>\r\n  ): Promise<PipelineResponse>;\r\n};\r\n\r\n/**\r\n * Interface that defines the TextAnalytics client\r\n */\r\nexport interface TextAnalyticsClient {\r\n  request: Request;\r\n  requestUnchecked: RequestUnchecked;\r\n}\r\nfunction createTextAnalyticsClient(\r\n  credentials: TokenCredential,\r\n  Endpoint: string,\r\n  options?: PipelineOptions\r\n): TextAnalyticsClient {\r\n  const baseUrl = \"{Endpoint}/text/analytics/v3.1-preview.3\".replace(\r\n    /{Endpoint}/g,\r\n    Endpoint\r\n  );\r\n  const pipeline = createDefaultPipeline(credentials, options);\r\n  pipeline.removePolicy({ name: \"exponentialRetryPolicy\" });\r\n\r\n  const client: TextAnalyticsClient = {\r\n    request: async (route, ...args) => {\r\n      const argumentsDetails = extractArguments(args);\r\n      const result = await sendRequest(\r\n        baseUrl,\r\n        pipeline,\r\n        route,\r\n        argumentsDetails\r\n      );\r\n      return result;\r\n    },\r\n    requestUnchecked: async (route, ...args) => {\r\n      const argumentsDetails = extractArguments(args);\r\n      const result = await sendRequest(\r\n        baseUrl,\r\n        pipeline,\r\n        route,\r\n        argumentsDetails\r\n      );\r\n      return result;\r\n    },\r\n  };\r\n\r\n  return client;\r\n}\r\n\r\nasync function sendRequest<R extends keyof Routes>(\r\n  baseUrl: string,\r\n  pipeline: Pipeline,\r\n  route: R | string,\r\n  argumentsDetails: ExtractedArguments<R>\r\n) {\r\n  const httpClient = getCachedDefaultHttpsClient();\r\n  const routeDetails = extractRouteDetails(route);\r\n  const url = buildRequestUrl(\r\n    baseUrl,\r\n    routeDetails.path,\r\n    argumentsDetails.pathParameters,\r\n    argumentsDetails.options\r\n  );\r\n\r\n  const headers = createHttpHeaders({\r\n    accept: \"application/json\",\r\n    \"content-type\": \"application/json\",\r\n    ...(argumentsDetails.options.headers\r\n      ? argumentsDetails.options.headers.toJSON()\r\n      : {}),\r\n  });\r\n\r\n  let body = undefined;\r\n\r\n  if (argumentsDetails.options.body) {\r\n    body = JSON.stringify(argumentsDetails.options.body);\r\n  }\r\n\r\n  const request = createPipelineRequest({\r\n    url: url.toString(),\r\n    method: routeDetails.method,\r\n    body,\r\n    headers,\r\n  });\r\n\r\n  const result = await pipeline.sendRequest(httpClient, request);\r\n\r\n  return {\r\n    request,\r\n    headers: result.headers,\r\n    status: result.status as any,\r\n    body: JSON.parse(result.bodyAsText || \"{}\"),\r\n  };\r\n}\r\n\r\ninterface ExtractedArguments<R extends keyof Routes> {\r\n  options: Routes[R][\"options\"] & RequestParameters;\r\n  pathParameters: string[];\r\n}\r\n\r\nfunction extractArguments<R extends keyof Routes>(\r\n  ...args: RequestArgs<R>\r\n): ExtractedArguments<R> {\r\n  let options: Routes[R][\"options\"] = {};\r\n  let pathParameters: string[] = [];\r\n  for (const arg of args) {\r\n    if (Array.isArray(arg)) {\r\n      for (const item of arg) {\r\n        if (typeof item === \"string\") {\r\n          pathParameters.push(item);\r\n        } else {\r\n          options = item;\r\n        }\r\n      }\r\n    }\r\n    break;\r\n  }\r\n\r\n  return {\r\n    options,\r\n    pathParameters,\r\n  };\r\n}\r\n\r\ninterface RouteDetails {\r\n  method: HttpMethods;\r\n  path: string;\r\n}\r\n\r\nfunction extractRouteDetails(route: string): RouteDetails {\r\n  if (!route) {\r\n    throw new Error(`route cannot be undefined or empty`);\r\n  }\r\n\r\n  const parts = route.split(\" \") as [HttpMethods, string];\r\n\r\n  const supportedMethods = [\r\n    \"GET\",\r\n    \"PUT\",\r\n    \"POST\",\r\n    \"DELETE\",\r\n    \"PATCH\",\r\n    \"HEAD\",\r\n    \"OPTIONS\",\r\n    \"TRACE\",\r\n  ];\r\n\r\n  if (parts.length !== 2) {\r\n    throw new Error(\r\n      `Unexpected route format for ${route}\\n The expected format is \"<VERB> <PATH>\" i.e \"POST /foo\" `\r\n    );\r\n  }\r\n  const [method, path] = parts;\r\n\r\n  if (!supportedMethods.includes(method.toUpperCase())) {\r\n    throw new Error(\r\n      `Unexpected method: ${method}\\n Supported methods: ${JSON.stringify(\r\n        supportedMethods\r\n      )} `\r\n    );\r\n  }\r\n\r\n  return {\r\n    method: method,\r\n    path,\r\n  };\r\n}\r\n\r\nfunction buildRequestUrl<R extends keyof Routes>(\r\n  baseUrl: string,\r\n  routePath: string,\r\n  pathParameters: string[],\r\n  options: Routes[R][\"options\"] = {}\r\n): string {\r\n  let path = routePath;\r\n  for (const pathParam of pathParameters) {\r\n    path = path.replace(/{.*?}/, pathParam);\r\n  }\r\n\r\n  const url = new URL(`${baseUrl}/${path}`);\r\n\r\n  if (options.queryParameters) {\r\n    const queryParams = options.queryParameters;\r\n    queryParams[\"model-version\"]\r\n    for (const key of Object.keys(queryParams)) {\r\n      url.searchParams.append(key, (queryParams as any)[key]);\r\n    }\r\n  }\r\n\r\n  return url.toString();\r\n}\r\n\r\nexport default createTextAnalyticsClient;\r\nexport * from \"./models\"\r\nexport * from \"./parameters\"\r\nexport * from \"./responses\"\r\n"]}